cacheSolve(m1)
cacheSolve(m1)
#Below are two functions that are used to create a special object that stores a
#matrix and cache's its inverse.
#The first function, makeCacheMatrix creates a special "vector", which is
#really a list containing a function to
#set the value of the matrix
#get the value of the matrix
#set the value of the inverse
#get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
m = NULL
set<- function(y){
x<<- y;
m <<- NULL
}
get <- function() x
setInverse <- function(Inverse) m <<- Inverse
getInverse <- function() m
list(set = set, get = get, setInverse = setInverse,
getInverse = getInverse)
}
# The following function calculates the inverse of the special "vector" created
#with the above function. However, it first checks to see if the inverse has
#already been calculated. If so, it gets the inverse from the cache and skips
#the computation. Otherwise, it calculates the inverse of the data and sets
#the value of the inverse in the cache via the setInverse function.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m<- x$getInverse()
if(!is.null(m)){
message("getting cached data")
}
data = x$get()
m<- solve(data,...)
x$setInverse(m)
m
}
myMatrix <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2)
myMatrix
m <- makeCacheMatrix(myMatrix)
m1 <- makeCacheMatrix(myMatrix)
cacheSolve(m1)
cacheSolve(m1)
cacheSolve(m1)
cacheSolve(m1)
## Assignment - Week 3
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
## Inverse property for Matrix
i <- NULL
## Setting the matrix
set <- function( matrix ) {
m <<- matrix
i <<- NULL
}
## Getting the matrix
get <- function() {
## Return the matrix
m
}
## Method to set the inverse of the matrix
setInverse <- function(inverse) {
i <<- inverse
}
## Getting inverse of the matrix
getInverse <- function() {
## Return the inverse property
i
}
## Return a list of the methods
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Second Function
##This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
##If the inverse has already been calculated (and the matrix has not changed),
##then cacheSolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
## Just return the inverse if its already set
if( !is.null(m) ) {
message("getting cached data")
return(m)
}
## Get the matrix from our object
data <- x$get()
## Calculate the inverse using matrix multiplication
m <- solve(data) %*% data
## Set the inverse to the object
x$setInverse(m)
## Return the matrix
m
}
myMatrix <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2)
m1 <- makeCacheMatrix(myMatrix)
cacheSolve(m1)
debug(cacheSolve)
myMatrix <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2)
m1 <- makeCacheMatrix(myMatrix)
cacheSolve(m1)
## Caching the Inverse of a Matrix:
## Matrix inversion is usually a costly computation and there may be some
## benefit to caching the inverse of a matrix rather than compute it repeatedly.
## Below are a pair of functions that are used to create a special object that
## stores a matrix and caches its inverse.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" created by
## makeCacheMatrix above. If the inverse has already been calculated (and the
## matrix has not changed), then it should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
undebug(cacheSolve)
myMatrix <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2)
m1 <- makeCacheMatrix(myMatrix)
cacheSolve(m1)
cacheSolve(m1)
cacheSolve(m1)
cacheSolve(m1)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL
set<-function(y){
x<-y
}
get<-function() x
setInv<-function(inverse) inv<<-inverse
getInv<-function() inv
list(get=get,set=set,setInv=setInv,getInv=getInv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv<-x$getInv()
if(!is.null(inv)){
message("getting cached data")
}
data<-x$get()
inv<-solve(data)
x$setInv(inv)
inv   ## Return a matrix that is the inverse of 'x'
}
myMatrix <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2)
m1 <- makeCacheMatrix(myMatrix)
cacheSolve(m1)
cacheSolve(m1)
cacheSolve(m1)
cacheSolve(m1)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL
set<-function(y){
x<-y
}
get<-function() x
setInv<-function(inverse) inv<<-inverse
getInv<-function() inv
list(get=get,set=set,setInv=setInv,getInv=getInv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv<-x$getInv()
if(!is.null(inv)){
message("getting cached data")
}
data<-x$get()
inv<-solve(data)
x$setInv(inv)
inv   ## Return a matrix that is the inverse of 'x'
}
myMatrix <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2)
m1 <- makeCacheMatrix(myMatrix)
cacheSolve(m1)
cacheSolve(m1)
cacheSolve(m1)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL
set<-function(y){
x<-y
}
get<-function() x
setInv<-function(inverse) inv<<-inverse
getInv<-function() inv
list(get=get,set=set,setInv=setInv,getInv=getInv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv<-x$getInv()
if(!is.null(inv)){
message("getting cached data")
}
data<-x$get()
inv<-solve(data)
x$setInv(inv)
inv   ## Return a matrix that is the inverse of 'x'
}
myMatrix <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2)
m1 <- makeCacheMatrix(myMatrix)
cacheSolve(m1)
cacheSolve(m1)
cacheSolve(m1)
debug(cacheSolve)
m1 <- makeCacheMatrix(myMatrix)
cacheSolve(m1)
undebug(cacheSolve)
undebug(cacheSolve)
library(datasets)
mtcars
cars <- mtcars
str(cars)
cars %>%
groupby(gear) %>%
mean(mpg)
View(cars)
cars %>%
mean(mpg) %>%
grouping(gear
)
library(dplyr)
cars %>%
mean(mpg) %>%
group_by(gear)
cars %>%
group_by(gear) %>%
mean(mpg)
cars %>%
group_by(gear) %>%
mean(mpg, rm.na = TRUE)
cars %>%
group_by($gear) %>%
nrow($mpg)
cars %>%
group_by(gear) %>%
nrow(mpg)
cars %>%
group_by(gear) %>%
nrow()
cars %>%
group_by(gear) %>%
mean(mpg, na.rm = TRUE)
?group_by
cars %>%
group_by(gear)
cars %>%
group_by(gear) %>%
summarise(mean = mean(mpg))
cars %>%
group_by(gear) %>%
summarise(mean = max(mpg))
cars %>%
group_by(gear) %>%
summarise(max = max(mpg) +
min = min(mpg))
cars %>%
group_by(gear) %>%
summarise(max = max(mpg),
min = min(mpg))
?rnorm
a <- rnorm(100)
library(ggplot2)
ggplot(a, x = a) +
geom_histogram()
str(a)
b <- data.frame(a)
ggplot(b, x = b) +
geom_histogram()
ggplot(b, aes(x = b) +
geom_histogram()
ggplot(b, aes(x = b)) +
geom_histogram()
rm(list = ls())
set.seed(10)
rnorm(5)
rnorm(5)
set.seed(10)
rnorm(5)
set.seed(1)
rpois(5,2)
>qpois()
?qpois
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
selecr(cran, r_arch:country)
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -5:20)
select(cran, -X:size)
select(cran, -X:-size)
-5:20
-(5:20)
select(cran, -(X-size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country = "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
select(cran, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarise(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
swirl()
## Register application with GitHub to conect to API and answer
## questions
## Load library
library(httr)
library(jsonlite)
## Set up the authentication for GutHub
oauth_endpoints("github")
myapp <- oauth_app("github", key = "64904002cd175348824c",
secret = "bce88f3e95c42b9d762d1dee022f8592efef4c54")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
## Now do the request
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
json1 <- content(req)
## Convert to DataFrame
json2 <- jsonlite::fromJSON(toJSON(json1))
## Find the correspondiing row
rowNo <- json2[which(json2$url == "https://api.github.com/repos/jtleek/datasharing"),]
## Get the date it was created
rowNo$created_at
## set the working directory
setwd("C:/Users/dave_/OneDrive/GitHub/Coursera/Getting and Cleaning Data/Week 4/Assignment/GettingCleaningDataAssignment")
## set the working directory
setwd("C:/Users/dave_/OneDrive/GitHub/Coursera/Getting and Cleaning Data/Week 4/Assignment/GettingCleaningDataAssignment")
## Assignemnt point 1
## Read in features file
features <- read.table("UCI HAR Dataset/features.txt", stringsAsFactors = FALSE)
## Read in activity labels file
activityType <- read.table("UCI HAR Dataset/activity_labels.txt", stringsAsFactors = FALSE)
## Read in the train datasets
## X_train with all of the variables
train <- read.table("UCI HAR Dataset/train/X_train.txt")
## y_train which contains the activity labels in number form
yTrain <- read.table("UCI HAR Dataset/train/y_train.txt")
## subject_train which contains the ID of each subject
trainSubject <- read.table("UCI HAR Dataset/train/subject_train.txt")
## Read in the test datasets
## X_test with all of the variables
test <- read.table("UCI HAR Dataset/test/X_test.txt")
## y_test which contains the activity labels in number form
yTest <- read.table("UCI HAR Dataset/test/y_test.txt")
## subject_test which contains the ID of each subject
testSubject <- read.table("UCI HAR Dataset/test/subject_test.txt")
## Using CBind, link the test to testSubject and train to trainSubject dataframes
test <- cbind(testSubject, yTest, test)
train <- cbind(trainSubject, yTrain, train)
## Now we tidy up the data frames we no longer require
rm(testSubject, trainSubject, yTest, yTrain)
## Now merge the test and train data frames using RBind
galaxy <- rbind(test, train)
## Tidy up the test and train files
rm(test, train)
## Assignment Point 4
## Set the variable names of the train data
names(galaxy)[1] <- "subject"
names(galaxy)[2] <- "activity"
names(galaxy)[3:563] <- features$V2
## Tidy up features
rm(features)
## Assignment Point 3
## Amend the activity from the numerics to the descriptive text
galaxy$activity <- activityType[,2][match(galaxy$activity, activityType[,1])]
## Now convert it to a factor
galaxy$activity <- as.factor(galaxy$activity)
## Clean up by removing the activityType data frame
rm(activityType)
## Assignment Point 2
## Get a data frame that only contains the values for mean or standard deviation
finalData <- galaxy[grep("subject|activity|mean[()]|std()", names(galaxy), value = TRUE)]
## Clean up by removing galaxy
rm(galaxy)
## Assignment Point 5
## Create a summary grouped by each subject and activity for the mean of each variable using
## the finalData output
finalSummary <- aggregate(finalData[, -c(1:2)], list(Subject = finalData$subject, Activity = finalData$activity), mean)
## Add short descriptions to each variable
attr(finalSummary$Subject, "shortDescription") <- "Identifier of the individual subject"
attr(finalSummary$Activity, "shortDescription") <- "Description of the activity"
attr(finalSummary$`tBodyAcc-mean()-X`, "shortDescription") <- "Mean of tBodyAcc on the X Axis"
attr(finalSummary$`tBodyAcc-mean()-Y`, "shortDescription") <- "Mean of tBodyAcc on the Y Axis"
attr(finalSummary$`tBodyAcc-mean()-Z`, "shortDescription") <- "Mean of tBodyAcc on the Z Axis"
attr(finalSummary$`tBodyAcc-std()-X`, "shortDescription") <- "Standard Deviation of tBodyAcc on the X Axis"
attr(finalSummary$`tBodyAcc-std()-Y`, "shortDescription") <- "Standard Deviation of tBodyAcc on the Y Axis"
attr(finalSummary$`tBodyAcc-std()-Z`, "shortDescription") <- "Standard Deviation of tBodyAcc on the Z Axis"
attr(finalSummary$`tGravityAcc-mean()-X`, "shortDescription") <- "Mean of tGravityAcc on the X Axis"
attr(finalSummary$`tGravityAcc-mean()-Y`, "shortDescription") <- "Mean of tGravityAcc on the Y Axis"
attr(finalSummary$`tGravityAcc-mean()-Z`, "shortDescription") <- "Mean of tGravityAcc on the Z Axis"
attr(finalSummary$`tGravityAcc-std()-X`, "shortDescription") <- "Standard Deviation of tGravityAcc on the X Axis"
attr(finalSummary$`tGravityAcc-std()-Y`, "shortDescription") <- "Standard Deviation of tGravityAcc on the Y Axis"
attr(finalSummary$`tGravityAcc-std()-Z`, "shortDescription") <- "Standard Deviation of tGravityAcc on the Z Axis"
attr(finalSummary$`tBodyAccJerk-mean()-X`, "shortDescription") <- "Mean of tBodyAccJerk on the X Axis"
attr(finalSummary$`tBodyAccJerk-mean()-Y`, "shortDescription") <- "Mean of tBodyAccJerk on the Y Axis"
attr(finalSummary$`tBodyAccJerk-mean()-Z`, "shortDescription") <- "Mean of tBodyAccJerk on the Z Axis"
attr(finalSummary$`tBodyAccJerk-std()-X`, "shortDescription") <- "Standard Deviation of tBodyAccJerk on the X Axis"
attr(finalSummary$`tBodyAccJerk-std()-Y`, "shortDescription") <- "Standard Deviation of tBodyAccJerk on the Y Axis"
attr(finalSummary$`tBodyAccJerk-std()-Z`, "shortDescription") <- "Standard Deviation of tBodyAccJerk on the Z Axis"
attr(finalSummary$`tBodyGyro-mean()-X`, "shortDescription") <- "Mean of tBodyGyro on the X Axis"
attr(finalSummary$`tBodyGyro-mean()-Y`, "shortDescription") <- "Mean of tBodyGyro on the Y Axis"
attr(finalSummary$`tBodyGyro-mean()-Z`, "shortDescription") <- "Mean of tBodyGyro on the Z Axis"
attr(finalSummary$`tBodyGyro-std()-X`, "shortDescription") <- "Standard Deviation of tBodyGyro on the X Axis"
attr(finalSummary$`tBodyGyro-std()-Y`, "shortDescription") <- "Standard Deviation of tBodyGyro on the Y Axis"
attr(finalSummary$`tBodyGyro-std()-Z`, "shortDescription") <- "Standard Deviation of tBodyGyro on the Z Axis"
attr(finalSummary$`tBodyGyroJerk-mean()-X`, "shortDescription") <- "Mean of tBodyGyroJerk on the X Axis"
attr(finalSummary$`tBodyGyroJerk-mean()-Y`, "shortDescription") <- "Mean of tBodyGyroJerk on the Y Axis"
attr(finalSummary$`tBodyGyroJerk-mean()-Z`, "shortDescription") <- "Mean of tBodyGyroJerk on the Z Axis"
attr(finalSummary$`tBodyGyroJerk-std()-X`, "shortDescription") <- "Standard Deviation of tBodyGyroJerk on the X Axis"
attr(finalSummary$`tBodyGyroJerk-std()-Y`, "shortDescription") <- "Standard Deviation of tBodyGyroJerk on the Y Axis"
attr(finalSummary$`tBodyGyroJerk-std()-Z`, "shortDescription") <- "Standard Deviation of tBodyGyroJerk on the Z Axis"
attr(finalSummary$`tBodyAccMag-mean()`, "shortDescription") <- "Mean of tBodyAccMag"
attr(finalSummary$`tBodyAccMag-std()`, "shortDescription") <- "Standard Deviation of tBodyAccMag"
attr(finalSummary$`tGravityAccMag-mean()`, "shortDescription") <- "Mean of tGravityAccMag"
attr(finalSummary$`tGravityAccMag-std()`, "shortDescription") <- "Standard Deviation of tGravityAccMag"
attr(finalSummary$`tBodyAccJerkMag-mean()`, "shortDescription") <- "Mean of tBodyAccJerkMag"
attr(finalSummary$`tBodyAccJerkMag-std()`, "shortDescription") <- "Standard Deviation of tBodyAccJerkMag"
attr(finalSummary$`tBodyGyroMag-mean()`, "shortDescription") <- "Mean of tBodyGyroMag"
attr(finalSummary$`tBodyGyroMag-std()`, "shortDescription") <- "Standard Deviation of tBodyGyroMag"
attr(finalSummary$`tBodyGyroJerkMag-mean()`, "shortDescription") <- "Mean of tBodyGyroJerkMag"
attr(finalSummary$`tBodyGyroJerkMag-std()`, "shortDescription") <- "Standard Deviation of tBodyGyroMag"
attr(finalSummary$`tBodyAccJerkMag-mean()`, "shortDescription") <- "Mean of tBodyAccJerkMag"
attr(finalSummary$`tBodyAccJerkMag-std()`, "shortDescription") <- "Standard Deviation of tBodyAccJerkMag"
attr(finalSummary$`fBodyAcc-mean()-X`, "shortDescription") <- "Mean of fBodyAcc on the X Axis"
attr(finalSummary$`fBodyAcc-mean()-Y`, "shortDescription") <- "Mean of fBodyAcc on the Y Axis"
attr(finalSummary$`fBodyAcc-mean()-Z`, "shortDescription") <- "Mean of fBodyAcc on the Z Axis"
attr(finalSummary$`fBodyAcc-std()-X`, "shortDescription") <- "Standard Deviation of fBodyAcc on the X Axis"
attr(finalSummary$`fBodyAcc-std()-Y`, "shortDescription") <- "Standard Deviation of fBodyAcc on the Y Axis"
attr(finalSummary$`fBodyAcc-std()-Z`, "shortDescription") <- "Standard Deviation of fBodyAcc on the Z Axis"
attr(finalSummary$`fBodyAccJerk-mean()-X`, "shortDescription") <- "Mean of fBodyAccJerk on the X Axis"
attr(finalSummary$`fBodyAccJerk-mean()-Y`, "shortDescription") <- "Mean of fBodyAccJerk on the Y Axis"
attr(finalSummary$`fBodyAccJerk-mean()-Z`, "shortDescription") <- "Mean of fBodyAccJerk on the Z Axis"
attr(finalSummary$`fBodyAccJerk-std()-X`, "shortDescription") <- "Standard Deviation of fBodyAccJerk on the X Axis"
attr(finalSummary$`fBodyAccJerk-std()-Y`, "shortDescription") <- "Standard Deviation of fBodyAccJerk on the Y Axis"
attr(finalSummary$`fBodyAccJerk-std()-Z`, "shortDescription") <- "Standard Deviation of fBodyAccJerk on the Z Axis"
attr(finalSummary$`fBodyGyro-mean()-X`, "shortDescription") <- "Mean of fBodyGyro on the X Axis"
attr(finalSummary$`fBodyGyro-mean()-Y`, "shortDescription") <- "Mean of fBodyGyro on the Y Axis"
attr(finalSummary$`fBodyGyro-mean()-Z`, "shortDescription") <- "Mean of fBodyGyro on the Z Axis"
attr(finalSummary$`fBodyGyro-std()-X`, "shortDescription") <- "Standard Deviation of fBodyGyro on the X Axis"
attr(finalSummary$`fBodyGyro-std()-Y`, "shortDescription") <- "Standard Deviation of fBodyGyro on the Y Axis"
attr(finalSummary$`fBodyGyro-std()-Z`, "shortDescription") <- "Standard Deviation of fBodyGyro on the Z Axis"
attr(finalSummary$`fBodyAccMag-mean()`, "shortDescription") <- "Mean of fBodyAccMag on the X Axis"
attr(finalSummary$`fBodyAccMag-std()`, "shortDescription") <- "Standard Deviation of fBodyAccMag on the X Axis"
attr(finalSummary$`fBodyBodyAccJerkMag-mean()`, "shortDescription") <- "Mean of fBodyBodyAccJerkMag on the X Axis"
attr(finalSummary$`fBodyBodyAccJerkMag-std()`, "shortDescription") <- "Standard Deviation of fBodyBodyAccJerkMag on the X Axis"
attr(finalSummary$`fBodyBodyGyroMag-mean()`, "shortDescription") <- "Mean of fBodyBodyGyroMag on the X Axis"
attr(finalSummary$`fBodyBodyGyroMag-std()`, "shortDescription") <- "Standard Deviation of fBodyBodyGyroMag on the X Axis"
attr(finalSummary$`fBodyBodyGyroJerkMag-mean()`, "shortDescription") <- "Mean of fBodyBodyGyroJerkMag on the X Axis"
attr(finalSummary$`fBodyBodyGyroJerkMag-std()`, "shortDescription") <- "Standard Deviation of fBodyBodyGyroJerkMag on the X Axis"
## Use dataMaid to create the codebook
library(dataMaid)
makeCodebook(finalSummary, replace = TRUE, mode = "summarize")
